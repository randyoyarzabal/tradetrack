name: TradeTrack Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Run daily at 2 AM UTC

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12, 3.13]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install production dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install test dependencies
      run: |
        pip install -r tests/requirements.txt

    - name: Run syntax validation
      run: |
        echo "✓ Running syntax validation..."
        python -m py_compile ttrack.py
        python -m py_compile libs/*.py
        python -m py_compile tests/*.py
        echo "✓ Syntax validation passed"

    - name: Run basic tests
      run: |
        echo "✓ Running basic tests..."
        python tests/run_tests.py --basic
        echo "✓ Basic tests passed"

    - name: Run component tests
      run: |
        echo "✓ Running component tests..."
        python tests/run_tests.py --component
        echo "✓ Component tests passed"

    - name: Run all tests with coverage
      run: |
        echo "✓ Running all tests with coverage..."
        pytest tests/ -v --cov=libs --cov-report=xml --cov-report=html --cov-report=term-missing
        echo "✓ All tests with coverage passed"

    - name: Run linting
      run: |
        echo "✓ Running linting..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        echo "✓ Linting passed"

    - name: Run type checking
      run: |
        echo "✓ Running type checking..."
        mypy --ignore-missing-imports libs/
        echo "✓ Type checking passed"

    - name: Run security scan
      run: |
        echo "✓ Running security scan..."
        bandit -r libs/ -f json -o bandit-report.json || true
        safety check --json --output safety-report.json || true
        echo "✓ Security scan completed"

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
          bandit-report.json
          safety-report.json

  test-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.9, 3.11, 3.13]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements.txt

    - name: Run tests on Windows
      run: |
        echo "✓ Running tests on Windows..."
        python tests/run_tests.py
        echo "✓ Windows tests passed"

  test-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [3.9, 3.11, 3.13]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements.txt

    - name: Run tests on macOS
      run: |
        echo "✓ Running tests on macOS..."
        python tests/run_tests.py
        echo "✓ macOS tests passed"

  test-dependencies:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Test dependency resolution
      run: |
        echo "✓ Testing dependency resolution..."
        pip install -r requirements.txt
        pip install -r tests/requirements.txt
        pip check
        echo "✓ Dependencies resolved successfully"

    - name: Test minimum Python version
      run: |
        echo "✓ Testing minimum Python version compatibility..."
        python -c "import sys; assert sys.version_info >= (3, 9)"
        echo "✓ Python version compatibility confirmed"

  notify:
    runs-on: ubuntu-latest
    needs: [test, test-windows, test-macos, test-dependencies]
    if: always()
    steps:
    - name: Notify test results
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.test-windows.result }}" == "success" ] && [ "${{ needs.test-macos.result }}" == "success" ]; then
          echo "✓ All tests passed successfully!"
        else
          echo "⚠ Some tests failed. Check the logs for details."
        fi